<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>active = true;
slot_amount = 30;
w = 388;
h = 700;
drag_interface = false;
drag_interface_x = 0;
drag_interface_y = 0;

resize_interface_w = false;
resize_interface_h = false;

drag_item_index = -1;
drag_item_x = 0;
drag_item_y = 0;

    for(i=0; i&lt;slot_amount; i++){
        var new_slot = instance_create(i*80, 0, obj_inventory_slot);
        new_slot.index = i;
        slot_list[i] = new_slot;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>clicked_on_slot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var mx = device_mouse_x_to_gui(0), my = device_mouse_y_to_gui(0);
var b = 3;//Border for resizeability
var slot_w = 64;
window_set_cursor(cr_default);
    if(!clicked_on_slot){
            if(mx&gt;x and mx&lt;=x+w-b and my&gt;y and my&lt;=y+h-b){//Drag window
                if(mouse_check_button_pressed(mb_left)){
                    drag_interface = true;
                    drag_interface_x = mx-x;
                    drag_interface_y = my-y;
                }
            }
            if(mx&gt;x+w-b and mx&lt;=x+w and my&gt;y and my&lt;=y+h){
                window_set_cursor(cr_size_we);
                    if(mouse_check_button_pressed(mb_left)){
                        resize_interface_w = true;
                    }
            }
            if(mx&gt;x and mx&lt;=x+w and my&gt;y+h-b and my&lt;=y+h){
                window_set_cursor(cr_size_ns);
                    if(mouse_check_button_pressed(mb_left)){
                        resize_interface_h = true;
                    }
            }
            if(mx&gt;x+w-b and mx&lt;=x+w and my&gt;y+h-b and my&lt;=y+h){
                window_set_cursor(cr_size_nwse);
            }
    }
    if(drag_interface){
        x = min(max(0, mx-drag_interface_x), window_get_width()-w);
        y = min(max(0, my-drag_interface_y), window_get_height()-h);
            if(mouse_check_button_released(mb_left)){
                drag_interface = false;
            }
    }
    if(resize_interface_w){
        window_set_cursor(cr_size_we);
        w = max(mx-x, slot_w*2);
            if(mouse_check_button_released(mb_left)){
                resize_interface_w = false;
            }
    }
    if(resize_interface_h){
        window_set_cursor(cr_size_ns);
        h = max(my-y, slot_w*2);
            if(mouse_check_button_released(mb_left)){
                resize_interface_h = false;
            }
    }
    if(resize_interface_w &amp;&amp; resize_interface_h){
        window_set_cursor(cr_size_nwse);
    }
    
draw_set_color(c_gray);
draw_rectangle(x, y, x+w, y+h, false);
var h_slot_amount = max(floor((w-2*20)/slot_w), 1);
var center_x = w/2;
var slot_area_w = h_slot_amount*(slot_w+2);
var start_x = center_x-slot_area_w/2;

draw_set_color(c_black);

var i;
    for(i=0; i&lt;slot_amount; i++){
        var result_slot = slot_list[i];
        var a = i % h_slot_amount;
        var b = floor(i / h_slot_amount);

        result_slot.x = x+start_x+a*(slot_w+2);
        result_slot.y = y+b*(slot_w+2)+50;
        
            if(result_slot.item_object!=-1 &amp;&amp; drag_item_index!=i){
                result_slot.item_object.x = result_slot.x;
                result_slot.item_object.y = result_slot.y;
            }
    }

/*
var h_slot_amount = @math.max(@math.floor(($view_size.x-2*20)/68), 1);
var center_x = $view_size.x/
var slot_w = h_slot_amount*(68+2);
var start_x = center_x-slot_w/2;
var i, j;
for(i=0; i&lt;$slot_list.length; i++){
var a, b;
var result_slot = $slot_list[i];
a = i % h_slot_amount;
b = @math.floor(i / h_slot_amount);
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
